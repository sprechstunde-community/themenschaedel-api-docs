openapi: 3.0.3

info:
  title: "Themensch√§del Archive"
  description: "We are a bunch of people from the \"Sprechstunde\" community, building awesome stuff for the community!"
  version: "latest"

servers:
  - url: '{protocol}://{domain}/'
    variables:
      protocol:
        enum:
          - https
          - http
        default: https
      domain:
        default: api.example.com
  - url: '{protocol}://{domain}:{port}/'
    variables:
      protocol:
        enum:
          - https
          - http
        default: https
      domain:
        default: api.example.com
      port:
        default: '443'

tags:
  - name: search
  - name: episodes
  - name: topics
  - name: subtopics
  - name: hosts
  - name: flags
    description: "A flag is bound to an episode and indicates, that something is incorrect and needs to be redone."
  - name: users

paths:

  /search/{entity}:
    parameters:
      - name: "entity"
        in: "path"
        required: true
        schema:
          type: string
          enum:
            - "episodes"
            - "topics"
            - "subtopics"
      - name: "q"
        description: "Search Query"
        in: "query"
        schema:
          type: string
      - $ref: "#/components/parameters/Pagination"
      - $ref: "#/components/parameters/PerPage"
    get:
      tags:
        - "search"
      responses:
        default:
          description: "Success"

  /episodes:
    get:
      tags:
        - "episodes"
      parameters:
        - $ref: "#/components/parameters/Pagination"
        - $ref: "#/components/parameters/PerPage"
      responses:
        default:
          description: "Success"
    post:
      tags:
      - "episodes"
      operationId: "createEpisode"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Episode"
      responses:
        default:
          description: "Success"

  /episodes/{episode}:
    parameters:
      - name: "episode"
        in: "path"
        required: true
        schema:
          type: "integer"
    get:
      tags:
      - "episodes"
      operationId: "getEpisode"
      responses:
        default:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Episode"
    put:
      tags:
      - "episodes"
      operationId: "updateEpisode"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/Episode"
      responses:
        default:
          description: "Success"
    delete:
      tags:
      - "episodes"
      summary: "Delete episode"
      operationId: "deleteEpisode"
      responses:
        default:
          description: "Success"

  /episodes/{episode}/claim:
    parameters:
      - name: "episode"
        in: "path"
        required: true
        schema:
          type: "integer"
    post:
      tags:
        - "episodes"
      summary: "Claim an episode"
      operationId: "createEpisodeClaim"
      parameters:
        - name: "episode"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        default:
          description: "Success"
        409:
          description: "Already claimed"
    delete:
      tags:
        - "episodes"
      summary: "Remove the claim from the episode"
      operationId: "deleteEpisodeClaim"
      responses:
        default:
          description: "Success"
        403:
          description: "Forbidden: Only the user who has claimed the episode can release it again"

  /episodes/{episode}/vote:
    parameters:
      - name: "episode"
        in: "path"
        required: true
        schema:
          type: "integer"
    post:
      tags:
        - "episodes"
      summary: "Vote for an episode"
      operationId: "voteEpisode"
      requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vote"
      responses:
        default:
          description: "Success"
        400:
          description: "Bad Request; Is the direction parameter missing?"

  /episodes/{episode}/flags:
    parameters:
      - name: "episode"
        in: "path"
        required: true
        schema:
          type: "integer"
    get:
      tags:
        - "episodes"
        - "flags"
      parameters:
        - $ref: "#/components/parameters/Pagination"
        - $ref: "#/components/parameters/PerPage"
      responses:
        default:
          description: "Success"
    post:
      tags:
        - "episodes"
        - "flags"
      operationId: "createFlag"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Flag"
      responses:
        default:
          description: "Success"

  /episodes/{episode}/hosts:
    get:
      tags:
        - "episodes"
        - "hosts"
      summary: "List of show hosts appearing on the episode"
      operationId: "getEpisodeHosts"
      parameters:
        - name: "episode"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        default:
          description: "Success"

  /episodes/{episode}/topics:
    parameters:
      - name: "episode"
        in: "path"
        required: true
        schema:
          type: "integer"
    get:
      tags:
        - "episodes"
        - "topics"
      parameters:
        - $ref: "#/components/parameters/Pagination"
        - $ref: "#/components/parameters/PerPage"
      responses:
        default:
          description: "Success"
    post:
      tags:
        - "episodes"
        - "topics"
      operationId: "createEpisodeTopic"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Topic"
      responses:
        default:
          description: "Success"

  /topics:
    get:
      tags:
        - "topics"
      parameters:
        - $ref: "#/components/parameters/Pagination"
        - $ref: "#/components/parameters/PerPage"
      responses:
        default:
          description: "Success"

  /topics/{topic}:
    parameters:
    - name: "topic"
      in: "path"
      required: true
      schema:
        type: "string"
    get:
      tags:
      - "topics"
      operationId: "getTopics"
      responses:
        default:
          description: "Success"
        404:
          description: "Not found"
    put:
      tags:
      - "topics"
      operationId: "updateTopic"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Topic"
      responses:
        404:
          description: "Not found"
    delete:
      tags:
      - "topics"
      operationId: "deleteTopic"
      responses:
        default:
          description: "Success"
        404:
          description: "Not found"

  /topics/{topic}/subtopics:
    parameters:
      - name: "topic"
        in: "path"
        required: true
        schema:
          type: "string"
    get:
      tags:
        - "topics"
        - "subtopics"
      parameters:
        - $ref: "#/components/parameters/Pagination"
        - $ref: "#/components/parameters/PerPage"
      responses:
        default:
          description: "Success"
    post:
      tags:
        - "topics"
        - "subtopics"
      operationId: "createTopicSubtopic"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Subtopic"
      responses:
        default:
          description: "Success"

  /subtopics:
    get:
      tags:
        - "subtopics"
      parameters:
        - $ref: "#/components/parameters/Pagination"
        - $ref: "#/components/parameters/PerPage"
      responses:
        default:
          description: "Success"

  /subtopics/{subtopic}:
    parameters:
    - name: "subtopic"
      in: "path"
      required: true
      schema:
        type: "string"
    get:
      tags:
      - "subtopics"
      operationId: "getSubtopics"
      responses:
        default:
          description: "Success"
        404:
          description: "Not found"
    put:
      tags:
      - "subtopics"
      operationId: "updateSubtopic"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Subtopic"
      responses:
        default:
          description: "Success"
        404:
          description: "Not found"
    delete:
      tags:
      - "subtopics"
      operationId: "deleteSubtopic"
      responses:
        default:
          description: "Success"
        404:
          description: "Not found"

  /flags:
    get:
      tags:
        - "flags"
      operationId: "getFlags"
      parameters:
        - $ref: "#/components/parameters/Pagination"
        - $ref: "#/components/parameters/PerPage"
      responses:
        default:
          description: "Success"
        404:
          description: "Not found"

  /hosts:
    get:
      tags:
        - "hosts"
      parameters:
        - $ref: "#/components/parameters/Pagination"
        - $ref: "#/components/parameters/PerPage"
      responses:
        default:
          description: "Success"
    post:
      tags:
        - "hosts"
      operationId: "createHost"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Host"
      responses:
        default:
          description: "Success"

  /hosts/{host}:
    parameters:
      - name: "host"
        in: "path"
        required: true
        schema:
          type: "string"
    get:
      tags:
        - "hosts"
      operationId: "getHost"
      responses:
        default:
          description: "Success"
        404:
          description: "Not found"
    put:
      tags:
        - "hosts"
      operationId: "updateHost"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Host"
      responses:
        default:
          description: "Success"
        404:
          description: "Not found"
    delete:
      tags:
        - "hosts"
      operationId: "deleteHost"
      responses:
        default:
          description: "Success"
        404:
          description: "Not found"

  /hosts/{host}/episodes/{episode}:
    parameters:
      - name: "host"
        in: "path"
        required: true
        schema:
          type: "integer"
      - name: "episode"
        in: "path"
        required: true
        schema:
          type: "integer"
    post:
      tags:
        - "episodes"
        - "hosts"
      summary: "Link a host to an specific episode"
      operationId: "createHostEpisodeRelation"
      responses:
        default:
          description: "Success"
    delete:
      tags:
        - "episodes"
        - "hosts"
      summary: "Remove the link between the host and the episode"
      operationId: "deleteHostEpisodeRelation"
      responses:
        default:
          description: "Success"


  /flags/{flag}:
    parameters:
      - name: "flag"
        in: "path"
        required: true
        schema:
          type: "integer"
    get:
      tags:
        - "flags"
      operationId: "getFlag"
      responses:
        default:
          description: "Success"
        404:
          description: "Not found"
    put:
      tags:
        - "flags"
      operationId: "updateFlag"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Flag"
      responses:
        default:
          description: "Success"
        404:
          description: "Not found"
    delete:
      tags:
        - "flags"
      operationId: "deleteFlag"
      responses:
        default:
          description: "Success"
        404:
          description: "Not found"

  /users:
    get:
      tags:
        - "users"
      parameters:
        - $ref: "#/components/parameters/Pagination"
        - $ref: "#/components/parameters/PerPage"
      responses:
        default:
          description: "Success"
    post:
      tags:
        - "users"
      operationId: "createUser"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: "Success"

  /users/{username}:
    parameters:
      - name: "username"
        in: "path"
        required: true
        schema:
          type: "string"
    get:
      tags:
        - "users"
      operationId: "getUserByName"
      responses:
        default:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: "Not found"
    put:
      tags:
        - "users"
      operationId: "updateUser"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: "Success"
        404:
          description: "Not found"

    delete:
      tags:
        - "users"
      operationId: "deleteUser"
      responses:
        default:
          description: "Success"
        404:
          description: "Not found"


components:
  schemas:
    User:
      type: "object"
      properties:
        username:
          type: "string"
        email:
          type: "string"
        name:
          type: "string"
        description:
          type: "string"

    Episode:
      type: "object"
      properties:
        guid:
          type: "string"
          format: "uuid"
        episode_number:
          type: "integer"
          format: "int54"
        title:
          type: "string"
        subtitle:
          type: "string"
        description:
          type: "string"
        image:
          type: "string"
          format: "uri"
          default: "https://example.com/image.png"
        media_file:
          type: "string"
          format: "uri"
          default: "https://example.com/audio.mp3"
        duration:
          type: "integer"
          format: "int64"
          default: 3737
        type:
          type: "string"
          default: "full"
        explicit:
          type: "boolean"
          default: false
        published_at:
          type: "string"
          format: "date-time"

    Flag:
      type: "object"
      properties:
        reason:
          type: "string"
          default: "Incorrect topic at 00:45:15"

    Host:
      type: "object"
      properties:
        name:
          type: "string"
          default: "John Doe"
          required: true
        description:
          type: "string"
          required: false
        profile_picture:
          type: "string"
          format: "url"
          default: "https://picsum.photos/512"
          required: false
        main:
          type: "boolean"
          default: false
          required: false
          description: "Indicates whether the host is on (nearly) all shows present"

    Topic:
      type: "object"
      properties:
        name:
          type: "string"
          default: "Example Topic Name"
        start:
          type: "integer"
          format: "int64"
          default: 135
        end:
          type: "integer"
          format: "int64"
          default: 204
        ad:
          type: "boolean"
          default: false
        community_contribution:
          type: "boolean"

    Subtopic:
      type: "object"
      properties:
        name:
          type: "string"
          default: "Example Topic Name"

    Vote:
      type: "object"
      properties:
        direction:
          description: "Indicator if voted up, down or revoked"
          default: 1
          type: "integer"
          enum:
            - 1
            - 0
            - -1

  parameters:

    Pagination:
      in: query
      name: page
      required: false
      description: "Page number used to iterate through all items"
      schema:
        type: integer
        minimum: 1


    PerPage:
      in: query
      name: per_page
      required: false
      description: "Amount of items to display per request"
      schema:
        type: integer
        minimum: 1
